{"meta":{"title":"ChinTi's Blog","subtitle":"欢迎来到我的个人站","description":null,"author":"Chinti","url":"http://chinti.xyz"},"pages":[{"title":"about","date":"2017-12-19T04:34:07.000Z","updated":"2017-12-19T04:39:35.350Z","comments":true,"path":"about/index.html","permalink":"http://chinti.xyz/about/index.html","excerpt":"","text":"关于我占个坑 等博客完善之后再说"},{"title":"标签","date":"2017-12-25T06:01:53.000Z","updated":"2017-12-25T06:15:48.366Z","comments":true,"path":"tags/index.html","permalink":"http://chinti.xyz/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-12-19T05:01:02.000Z","updated":"2017-12-25T06:15:28.627Z","comments":true,"path":"categories/index.html","permalink":"http://chinti.xyz/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript DOM 编程艺术 阅读笔记","slug":"JavaScript-DOM-编程艺术-阅读笔记","date":"2018-01-07T08:03:38.000Z","updated":"2018-01-14T06:58:52.941Z","comments":true,"path":"2018/01/07/JavaScript-DOM-编程艺术-阅读笔记/","link":"","permalink":"http://chinti.xyz/2018/01/07/JavaScript-DOM-编程艺术-阅读笔记/","excerpt":"前言&#160; &#160; &#160;&#160;开始正式起步JavaScript的学习了，根据知乎的建议买了两本书《JavaScript DOM编程艺术》以及《JavaScript高级程序设计》，我打算先从编程艺术入手，全书将会围绕着一个具体的网页效果展开，使读者对JavaScript有个整体的了解。","text":"前言&#160; &#160; &#160;&#160;开始正式起步JavaScript的学习了，根据知乎的建议买了两本书《JavaScript DOM编程艺术》以及《JavaScript高级程序设计》，我打算先从编程艺术入手，全书将会围绕着一个具体的网页效果展开，使读者对JavaScript有个整体的了解。 第一章：JavaScript简史&#160; &#160; &#160;&#160;正如其名，本章主要介绍了JavaScript的起源，还有浏览器战争和DOM演变史。 JavaScript的起源，它是由Netscape公司与Sun公司合作开发的。在它出现之后，网页的可交互性得到了显著改善。JavaScript是一种脚本语言。 DOM是一套对文档的内容进行抽象和概念化的方法。 浏览器战争 DHTML，是Dynamic HTML(动态HTML)的缩写，它不是一个新技术，而是描述HTML、CSS和JavaScript技术组合的术语，其含义为 利用HTML把网页标记为各种元素 利用CSS设置元素样式和它们的显示位置 利用JavaScript实时的操控页面和改变样式 浏览器之间的冲突，Netscape公司的DOM和微软公司的DOM采用了不一样的方式，导致脚本不得不编写两次，并且为了确保正确向浏览器提供脚本，程序员必须写一些代码去探查在客户端运行的浏览器是哪一种 制定标准，W3C结合大家的优点推出了一个标准化的DOM 浏览器以外的考虑，DOM是一种API（应用编程接口），它可以使人们更方便的交流与合作 浏览器战争的结局，微软战胜了Netscape只是因为IE随系统附带而已 崭新的起点，现今几乎所有的浏览器都内置了对DOM的支持，只要遵循最新的DOM标准，就可以大胆去做 第二章：JavaScript语法&#160; &#160; &#160;&#160;本章主要是介绍JS语法，其实大多数与其他语言差不多，稍微记一些差别就行 准备工作，只需要文本编辑器（嗯 继续用记事本）和一个浏览器，可以通过两种方式执行JS代码 第一种方式是将JS代码放入head标签中的script标签之间 第二种方式是将代码存在一个扩展名为.js的独立文件，典型方式为在head放一个script并将它的src指向该文件，例如：&lt;script src = &quot;file.js&quot;&gt;&lt;/script&gt;,但是更好的方式是将script放在HTML文档末尾，&lt;/body&gt;之前，可以使浏览器更快的加载页面 本章给了一个text.html其中&lt;html lang = &quot;en&quot;&gt;用于向搜索引擎表示该页面为html语言，且语言为英语，lang代表language，若想改成中文，可使用zh-CN 语法，语句，注释（//,/*...*/,&lt;!--）推荐使用前两个 变量（variable）与赋值（assignment），JS允许程序员直接对变量赋值无需事先声明，但是提前声明是一种良好的编程习惯,在JS中是区分大小写的，变量名中不允许包含空格或标点符号（美元符号$除外），同时第一位不允许是数字 1var mood = &quot;happy&quot;,age = 33; 为了使变量易于阅读，可以在变量名中的适当位置插入下划线，例如var my_mood = &quot;happy&quot;;另一种方式称为驼峰式（camel case）,删除下划线，后面的新单词改用大写字母开头，例如var myMood = &quot;happy&quot;;,其中happy被称为字面量（literal），我想用何种命名方式主要还是靠实际工作中的团队约定吧 数据类型，JS是一种弱类型（weakly typed）语言，所以不需要进行类型声明（typing），所以程序员可随时改变变量的数据类型 字符串，需要用单引号或者双引号包裹住，但是若字符串中包含所用引号，则需要在此之前加一个”\\”进行转义（escaping） 12var height = &quot;about 5&apos;10\\&quot; tall&quot;;alert(height); 数值，布尔值 1234var age = 33.5;var temperature = -20.33333;var sleeping = true; 数组，之前三个都是标量（scalar），而存储一组值则需要数组（array） 123456var beatles = Array(4);var beatles = Array();//不知道元素个数时也能用array[index] = element; //填充（populating）var beatles = Array(&quot;John&quot;,&quot;Paul&quot;,&quot;George&quot;,&quot;Ringo&quot;);var beatles = [&quot;John&quot;,&quot;Paul&quot;,&quot;George&quot;,&quot;Ringo&quot;]//略随便 关联数组，可以使用明确下标，例如字符串,但这种方式不推荐1234var lennon = Array();lennon[&quot;name&quot;] = &quot;John&quot;;lennon[&quot;year&quot;] = 1940;lennon[&quot;living&quot;] = false; 对象(Object)，与数组类似 包含在对象中的数据可以通过两种形式访问，属性（property）和方法（method），为了使对象描述特定的人，需要通过new创建实例 内建对象，比如Array，和它的length属性，还有类似Math对象和Date对象 宿主对象，由浏览器提供的预定义对象被称为宿主对象（host object）12345678var lennon = Object();lennon.name = &quot;John&quot;;lennon.year = 1940;lennon.living = false;var lennon = &#123;name:&quot;John&quot;, year:1940; living:false &#125;; //花括号法Person.mood; Person.walk();var jeremy = new Person; 操作（operation），进行计算和处理数据，和其他的语言差不多，除了要记住字符串与数值拼接在一起会自动转化为字符串，以及记住JS是弱类型语言 条件语句（if…else）,比较操作符（==, &gt;=, &lt;=, &gt;, &lt;, !=, ===, !==）,全等和严格不相等是在比较某些类似false 与””的情况下 逻辑操作符（&amp;&amp;, ||, !）,为了避免歧义”!”后面最好跟（） 循环语句（if, while, do…while, for） 函数，若多次使用同一段代码可以将他们封装为一个函数，通过function定义一个函数的语法（参数argument），且JS拥有许多内建函数，例如alert 书中作者推荐利用下划线命名变量，驼峰法命名函数 变量的作用域，即全局变量和局部变量，在函数内定义变量避免二义性 第三章：DOM 文档：DOM中的”D” 对象：DOM中的”O”,分为三种类型 用户定义对象（user-defined object）：由程序员自行创建的对象 内建对象（naive object）：内建在JS中的对象 宿主对象（host object）：由浏览器提供的对象在JS最初的版本，提供了window对象，通称为BOM（浏览器对象模型），它提供了window.open和window.blur等方法，这些方法实现了到处被滥用的各种弹出窗口和下拉菜单 模型：DOM中的”M”,它代表着”Model”模型，DOM将一份文档表示为一棵树，称为节点树 节点（node） 元素节点 文本节点 属性节点 CSS （class属性 和 id属性） 获取元素，3种DOM方法可以获取元素节点，分别是通过元素ID、通过标签名字和通过类名字 getElementById，文档中每个元素都是一个对象 12345document.getElementById(id)//下面是个例子document.getElementByID(&quot;purchases&quot;)//你可以用typeof操作符验证返回的操作数alert(typeof document.getElementById(&quot;purchases&quot;)); getElementsByTagName，返回一个对象数组，通配符”*” 1234567891011121314 element.getElementsByTagName(tag) //下面是个例子 document.getElementsByTagName(&quot;li&quot;) //再例 alert(document.getElementsByTagName(&quot;li&quot;).length); //再再例 for (var i=0; i&lt;document.getElementsByTagName(&quot;li&quot;).length;i++)&#123; alert(typeof document.getElementsByTagName(&quot;li&quot;)[i])；&#125; //再再再例 var items = document.getElementsByTagName(&quot;li&quot;); for (var i=0; i&lt;items.length;i++)&#123; alert(typeof items[i])； &#125; getElementsByClassName，可以通过类名寻找元素，指定多个类，只需要在两者间加上空格 123getElementByClassName(class)//例alert(document.getElementsByClassName(&quot;important sale&quot;).length); [注]书中P42这里有一段函数用于匹配新老浏览器，现在已无用，但向后兼容性的思想应当记住 获取和设置属性 getAttribute，用于查询属性object.getAttribute(attribute),它不属于document对象，它只能通过元素节点对象调用 setAttribute，允许我们对属性节点值做出修改object.setAttribute(attribute,value)，同样只能用于元素节点 第四章：案例研究：JavaScript图片库&#160; &#160; &#160;&#160;本章将会被带着使用JS和DOM去建立一个图片库，首先编写一个优秀的标记文件，其次编写一个JS函数用以显示用户想要查看的图片，然后利用标记触发函数调用 标记 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang = &quot;en&quot;&gt; &lt;head&gt; &lt;meta charset = &quot;utf-8&quot;&gt; &lt;title&gt;Image Gallery&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Snapshots&lt;/h1&gt; &lt;ul&gt; &lt;li&gt; &lt;a href = &quot;images/fireworks.jpg&quot; title = &quot;A fireworks display&quot;&gt;Fireworks&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href = &quot;images/coffee.jpg&quot; title = &quot;A cup of black coffee&quot;&gt;Coffee&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href = &quot;images/rose.jpg&quot; title = &quot;A red,red rose&quot;&gt;Rose&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href = &quot;images/bigben.jpg&quot; title = &quot;The famous clock&quot;&gt;Big Ben&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;img id = &quot;placeholder&quot; src = &quot;images/placeholder.gif&quot; alt = &quot;my image gallery&quot;&gt;//占位 &lt;script type = &quot;text/javascript&quot; src = &quot;showPic.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JavaScript 12345678 //DOM方法如下 function showPic(whichpic)&#123; var source = whichpic.getAttribute(&quot;href&quot;); var placeholder = whichpic.getElementById(&quot;placeholder&quot;); placeholder.setAttribute(&quot;src&quot;,source);&#125; //非DOM方法如下,推荐使用DOM方法 placeholder.src = source; 应用这个JavaScript函数，添加事件处理函数（event handler）,这里需要注意的是，当你JS打错了会不执行然后页面正常跳转，我傻乎乎的找了半天html哪里写错了。。。 1&lt;a href = &quot;images/fireworks.jpg&quot; title = &quot;A fireworks display&quot; onclick = &quot;showPic(this); return false;&quot;&gt;Fireworks&lt;/a&gt; //在每个链接中加入onclick 对这个函数进行扩展 childNodes属性，可以用来获取任何一个元素的所有子元素，使用：element.childNodes,按书中要求我获得了9，是因为空格和换行符也会被解释为节点 nodeType属性，这个属性可以告诉我们节点是哪一种节点，它一共拥有12种值，但其中只有三个有实用价值，元素节点为1，属性节点为2，文本节点为3 nodeValue属性，用于得到和设置一个节点的值：node.nodeValue,这里要注意p元素本身的属性是个空值，你要找它的子节点，例如alert(description.childNodes[0].nodeValue); firstchild和lastchild属性 加上CSS样式 第五章：最佳实践&#160; &#160; &#160;&#160;本章将介绍一些最佳实践，同时向读者介绍了四种思想：平稳退化，分离JavaScript，向后兼容性，性能考虑 过去的错误，很多书中介绍的遗留问题在如今已经得到了解决 不要怪罪JavaScript Flash的遭遇 质疑一切，利用JS改变网页行为，必须三思而后行，确认是否必要 平稳退化，若JS不被浏览器支持，虽然某些功能无法使用，但基本操作仍能顺利完成（现今基本不用担心支持问题） window.open(url,name,features)，第三个参数是利用逗号分割的字符串，用于设定属性，例如尺寸显示位置等 “javascript:”伪协议，用于通过一个链接调用JavaScript函数，例如：&lt;a href = &quot;javascript:popUp(&#39;http://www.example.com/&#39;);&quot;&gt;Example&lt;/a&gt;，在html文档中通过伪协议调用JS代码并不好 内嵌的事件处理函数，类似onclick，&lt;a href = &quot;#&quot; onclick = &quot;popUp(&#39;http://www.example.com&#39;); return false;&quot;&gt;Example&lt;/a&gt;，若用户禁用JS这条链接将毫无作用 谁关心这个，除了禁用JS的浏览器的用户以外，你可以想象用户是搜索机器人，只有极少数搜索机器人可以理解JS代码，若你的网页无法平稳退化，它在搜索引擎上的排名会受到损害12345&lt;a href = &quot;http://www.example.com/&quot; onclick = &quot;popUp(&apos;http://www.example.com&apos;); return false;&quot;&gt;Example&lt;/a&gt;//精简下&lt;a href = &quot;http://www.example.com/&quot; onclick = &quot;popUp(this.getAttribute(&apos;href&apos;)); return false;&quot;&gt;Example&lt;/a&gt;//利用DOM提供的的this.href&lt;a href = &quot;http://www.example.com/&quot; onclick = &quot;popUp(this.href); return false;&quot;&gt;Example&lt;/a&gt; 向CSS学习 结构与样式的分离 渐进增强，“标记良好的内容就是一切” 分离JavaScript，利用id或class作为挂钩&lt;a href = &quot;http://www.example.com/&quot; class = &quot;popup&quot;&gt;Example&lt;/a&gt;，在外部JS文件中完成事件动作element.event = action...，具体步骤： 把文档里的所有链接放入一个数组 遍历数组 若果某个链接的class属性等于popup，就表示这个链接被点击时应该调用popUp()函数 于是，把这个连接的href传给popUp()函数，取消这个链接的默认行为12345678910111213window.load = prepareLinks; //必须function prepareLinks() &#123; var links = document.getElementsByTagName(&quot;a&quot;); for(var i=0; i&lt;links.length; i++)&#123; if(links[i].getAttribute(&quot;class&quot;) == &quot;popup&quot;)&#123; popUp(this.getAttribute(&quot;href&quot;)); return false; &#125; &#125;&#125;function popUp(winURL) &#123; window.open(winURL,&quot;popup&quot;,&quot;width=320,height=480&quot;);&#125; 向后兼容 对象检测，if(method){statements}，但是可读性较差，可以采用逻辑非的方式，if(!method) return false; 浏览器嗅探技术（browser sniffung），这个风险很大，因为浏览器有时会说谎，将自己报告成另外一种浏览器（我想到edge报告自己是chrome） 性能考虑 尽量少访问DOM和尽量减少标记，只要查询某些元素就要遍历整个DOM树，最好的方法就是将第一次结果保存在一个变量中 合并和放置脚本 压缩脚本，代码压缩工具：Douglas Crockford的JSMin、雅虎的YUI Compressor、谷歌的Closure Compiler 第六章：案例研究：图片库改进版&#160; &#160;&#160;&#160;本章是将上一章内容运用进之前所做的图片库 快速回顾，确认它能否支持平稳退化 JS是否分离 结构化程序设计备忘，通常认为函数只有一个出口和入口，但是过分拘泥这点会使代码难以阅读 添加事件处理函数 检查点，检查浏览器是否支持函数 变量名里有什么，用一些有意义的单词命名一长串代码，使代码更加易读和理解 遍历 改变行为 完成JavaScript函数 共享onload事件，将函数与onclick事件绑定，可以采用一个弹性的解决方案addLoadEvent123456789101112function addLoadEvent(func) &#123; var oldonload = window.onload; if(typeof window.onload != &apos;function&apos;) &#123; window.onload = func; &#125; else &#123; window.onload = function() &#123; oldonload(); func(); &#125; &#125;&#125; 不要做太多假设，在实际工作中，检查需要根据具体情况来做出 键盘访问，onkeypress，但是最好不要用它，且onclick的支持已经够完美 prepareGallery和showPic代码段 12345678910111213141516171819202122232425262728function showPic(whichpic) &#123; if (!document.getElementById(&quot;placeholder&quot;)) return false; var source = whichpic.getAttribute(&quot;href&quot;); var placeholder = document.getElementById(&quot;placeholder&quot;); if (placeholder.nodeName != &quot;IMG&quot;) return false; placeholder.setAttribute(&quot;src&quot;,source); if (document.getElementById(&quot;description&quot;)) &#123; var text = whichpic.getAttribute(&quot;title&quot;) ? whichpic.getAttribute(&quot;title&quot;):&quot;&quot;; var description = document.getElementById(&quot;description&quot;); if (description.firstChild.nodeType == 3)&#123; description.firstChild.nodeValue = text; &#125; &#125; return true;&#125;function prepareGallery() &#123; if (!document.getElementsByTagName) return false; if (!document.getElementById) return false; if (!document.getElementById(&quot;imagegallery&quot;)) return false; var gallery = document.getElementById(&quot;imagegallery&quot;); var links = gallery.getElementsByTagName(&quot;a&quot;); for(var i=0; i &lt; links.length; i++) &#123; links[i].onclick = function() &#123; return showPic(this)? false:true; &#125; &#125;&#125; 把JavaScript与CSS结合起来 DOM Core和HTML-DOM 第七章：动态创建标记&#160; &#160; &#160;&#160;本章主要是介绍一些传统方法和DOM方法 一些传统方法 document.write，最大的缺点是它违背了“行为应该与表现分离”的原则 innerHTML，用它读取内容毫无细节可言，会将标记和字符串一起读出，但是可以用来在js中把一段HTML内容完全替换进这个标签，无法做到插入，在XHTML中可能会忽略这个属性 DOM方法 createElement方法，使用：document.createElement(nodeName)，用于创建元素节点，创建后，它成为了一个文档碎片（document fragment），但它已经具有了一个nodeType和一个nodeName值 appendChild方法，使用：parent.appendChild(child)，用于插入某文档的节点树 createTextNode方法，使用：document.createTextNode(text)，用于创建一个文本节点 一个更复杂的组合12345678910111213 window.onload = function() &#123; var para = document.createElement(&quot;p&quot;); var txt1 = document.createTextNode(&quot;This is &quot;); para.appendChild(txt1); var emphasis = document.createElement(&quot;em&quot;); var txt2 = document.createTextNode(&quot;my&quot;); emphasis.appendChild(txt2); para.appendChild(emphasis); var txt3 = document.createTextNode(&quot; content. &quot;); para.appendChild(txt3); var testdiv = document.getElementById(&quot;testdiv&quot;); testdiv.appendChild(para);&#125; 重回图片库 insetBefore()在已有元素前插入一个新元素，使用：parentElement.insertBefore(newElement,targetElement)，例如：var gallery = document.getElementById(&quot;imagegallery&quot;); gallery.parentNode.insertBefore(placeholder,gallery) 在已有元素后插入一个新元素，并没有现成的函数，但是可以自己写，具体原理：若此元素为父元素最后一个孩子，使用appendChild，若不是，则利用insertBefore插入这个元素的下一个兄弟元素之前12345678function insertAfter(newElement,targetElement) &#123; var parent = targetElement.parentNode; if (parent.lastChild == targetElement) &#123; parent.appendChild(newElement); &#125;else&#123; parent.insertBefore(newElement,targetElement.nextSibling); &#125;&#125; Ajax，这个词用于概括异步加载页面内容的技术 XMLHttpRequest对象，它是Ajax技术的核心，充当浏览器中的脚本与服务器之间的中间人的角色，以往请求都是由浏览器发出，而现在JS也可以通过这个对象自己发送请求和处理响应，书中给了一个ajax例子，这里需要注意，Chrome本地服务器上并不能处理异步，换成火狐浏览器即可解决这个问题 渐进增强与Ajax Hijax 第八章：充实文档的内容&#160; &#160; &#160;&#160;本章将继续实践上一章学到的内容 不应该做什么，不要把重要内容通过DOM技术添加到网页上 把“不可见”变成“可见”，可以利用DOM技术得到隐藏在属性里的信息，创建标记封装这些信息，把这些标记插入到文档 显示“缩略语列表”,并编写displayAbbreviations函数 for (variable in array)可以用于遍历关联数组 过去版本的ie可能无法正常支持abbr，所以需要通过一些判断条件，在不支持时不执行这些js代码，即使某种浏览器会引起问题，但还是尽量不要用嗅探代码 12345678910111213141516171819202122232425262728293031323334353637383940414243 function displayAbbreviations() &#123; if(!document.getElementsByTagName) return false; if(!document.createElement) return false; if(!document.createTextNode) return false; // 取得所有缩略词 var abbreviations = document.getElementsByTagName(&quot;abbr&quot;); if (abbreviations.length &lt; 1) return false; var defs = new Array(); //遍历 for (var i=0; i&lt;abbreviations.length; i++) &#123; if (abbreviations[i].childNodes.length &lt; 1) continue; var definition = abbreviations[i].getAttribute(&quot;title&quot;); var key = abbreviations[i].lastChild.nodeValue; defs[key] = definition; &#125; //创建定义列表 var dlist = document.createElement(&quot;dl&quot;); //遍历定义 for (key in defs) &#123; var definition = defs[key]; //创建定义标题 var dtitle = document.createElement(&quot;dt&quot;); var dtitle_text = document.createTextNode(key); dtitle.appendChild(dtitle_text); //创建定义描述 var ddesc = document.createElement(&quot;dd&quot;); var ddesc_text = document.createTextNode(definition); ddesc.appendChild(ddesc_text); //把它们添加到定义列表 dlist.appendChild(dtitle); dlist.appendChild(ddesc); &#125; if (dlist.childNodes.length &lt; 1) return false; //创建标题 var header = document.createElement(&quot;h2&quot;); var header_text =document.createTextNode(&quot;Abbreviations&quot;); header.appendChild(header_text); //把标题添加到页面主体 document.body.appendChild(header); //把定义列表添加到页面主体 document.body.appendChild(dlist);&#125; 显示“文献来源链接表”，cite属性可以标识blockquote内容引自哪里，但是浏览器一般会完全忽略这个属性，在返回子节点时不要想当然，某些浏览器会将换行符也会解释为一个文本节点 1234567891011121314151617181920212223242526272829 function displayCitations() &#123; if (!document.getElementsByTagName) return false; if (!document.createElement) return false; if (!document.createTextNode) return false; //取得所有引用 var quotes = document.getElementsByTagName(&quot;blockquote&quot;); //遍历引用 for (var i=0; i&lt;quotes.length; i++)&#123; //如果没有cite属性，继续循环 if (!quotes[i].getAttribute(&quot;cite&quot;)) continue; //保存cite属性 var url = quotes[i].getAttribute(&quot;cite&quot;); //取得引用中所有元素节点 var quoteChildren = quotes[i].getElementsByTagName(&quot;*&quot;); //如果没有元素节点，继续循环 if (quoteChildren.length &lt; 1) continue; //取得引用中的最后一个元素节点 var elem = quoteChildren[quoteChildren.length - 1]; //创建标记 var link = document.createElement(&quot;a&quot;); var link_text = document.createTextNode(&quot;source&quot;); link.appendChild(link_text); link.setAttribute(&quot;href&quot;,url); var superscript = document.createElement(&quot;sup&quot;); superscript.appendChild(link); //把标记添加到引用中的最后一个元素节点 elem.appendChild(superscript); &#125;&#125; 显示“快捷键菜单”，accesskey属性可以把一个元素（如链接）与键盘上某个特定的按钮关联在一起，一般来说，Windows系统中，同时按下alt和特定按钮，在Mac中，是按下Ctrl，例Home，不要设置太多快捷键，会与浏览器内置快捷键冲突，常用方法 123456789101112131415161718192021222324252627282930313233343536373839404142function displayAccessKeys() &#123; if(!document.getElementsByTagName) return false; if(!document.createElement) return false; if(!document.createTextNode) return false; //取得文档中所有链接 var links = document.getElementsByTagName(&quot;a&quot;); //创建一个数组 var akeys = new Array(); //便利链接 for(var i=0; i&lt;links.length; i++) &#123; var current_link = links[i]; //若没有accesskey继续循环 if(!current_link.getAttribute(&quot;accesskey&quot;)) continue; //取得accesskey的值 var key = current_link.getAttribute(&quot;accesskey&quot;); //取得链接文本 var text = current_link.lastChild.nodeValue; //存入数组 akeys[key] = text; &#125; //创建列表 var list = document.createElement(&quot;ul&quot;); //遍历访问键 for(key in akeys) &#123; var text = akeys[key]; //创建放到列表项中的字符串 var str = key + &quot;:&quot; + text; //创建列表项 var item = document.createElement(&quot;li&quot;); var item_text = document.createTextNode(str); item.appendChild(item_text); //将列表项添加入列表 list.appendChild(item); &#125; //创建标题 var header = document.createElement(&quot;h3&quot;); var header_text = document.createTextNode(&quot;Accesskeys&quot;); header.appendChild(header_text); //把标题添加到页面主体 document.body.appendChild(header); document.body.appendChild(list);&#125; 第九章：CSS-DOM","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://chinti.xyz/categories/读书笔记/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://chinti.xyz/tags/JavaScript/"}]},{"title":"2018素描","slug":"2018素描","date":"2018-01-04T04:56:04.000Z","updated":"2018-01-04T05:45:01.489Z","comments":true,"path":"2018/01/04/2018素描/","link":"","permalink":"http://chinti.xyz/2018/01/04/2018素描/","excerpt":"前言&#160; &#160; &#160;&#160;以前画了许多但是搬家什么的也遗失了，大学也没怎么画过，既然重新开始画了，就好好记录下，其实第一张应该是为所欲为，但画的太丑了，不传了","text":"前言&#160; &#160; &#160;&#160;以前画了许多但是搬家什么的也遗失了，大学也没怎么画过，既然重新开始画了，就好好记录下，其实第一张应该是为所欲为，但画的太丑了，不传了 作品2018-01-02 Taylor Swift","categories":[{"name":"绘画","slug":"绘画","permalink":"http://chinti.xyz/categories/绘画/"}],"tags":[{"name":"sketch","slug":"sketch","permalink":"http://chinti.xyz/tags/sketch/"}]},{"title":"Head First HTML与CSS 阅读笔记（CSS部分）","slug":"Head-First-HTML与CSS-阅读笔记（CSS部分）","date":"2017-12-31T08:54:53.000Z","updated":"2018-01-07T11:32:46.446Z","comments":true,"path":"2017/12/31/Head-First-HTML与CSS-阅读笔记（CSS部分）/","link":"","permalink":"http://chinti.xyz/2017/12/31/Head-First-HTML与CSS-阅读笔记（CSS部分）/","excerpt":"前言&#160; &#160; &#160;&#160;本文是《Head First HTML与CSS》的CSS部分，另一部分为Head First HTML与CSS 阅读笔记（HTML部分）。","text":"前言&#160; &#160; &#160;&#160;本文是《Head First HTML与CSS》的CSS部分，另一部分为Head First HTML与CSS 阅读笔记（HTML部分）。 概念常识 CSS验证工具 css中的每一个语句包括一个场所（如卧室），以及这个场所的一个属性（如窗帘或地毯），还要应用到这个属性的一个样式（如蓝色，或者1英寸的瓷砖），使用：1234p&#123; //需要增加样式的元素 background-color: red; //指定样式属性border: 1px solid gray;&#125; 使用方式 在html文件中指定样式，需要在&lt;head&gt;元素中增加&lt;style&gt;， 12345&lt;style&gt;p&#123; //选择器 p选择器会选择HTML中所有的段落 color: maroo; //color 代表文本颜色 maroon 茶红色&#125;&lt;/style&gt; 外部链接，将规则放在XXX.css中，css文件通常被称为”样式表”stylesheet,然后不再需要style元素，将其删除，然后添加外部链接，例如&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;lounge.css&quot;&gt; link用于链入外部信息，rel属性制定了链接的文件关系，这里是样式表所以是stylesheet 规则合并，共通样式合并起来写，特定样式写在另一个规则里 1234h1，h2&#123; font-family: sans-serif; color: gray;&#125; 可以使用多个样式表，按照顺序通过link元素将样式表链入HTML文件，最下面的样式表最优先 在link元素中添加media属性，可以适用于指定设备的样式文件，使用方式如下 123 &lt;link href=&quot;lounge-mobile.css&quot; rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width: 480px)&quot;&gt; //创建了一个查询，指定了一个有屏幕的设备，且屏幕宽度不超过480像素&lt;link href=&quot;lounge-print.css&quot; rel=&quot;stylesheet&quot; media=&quot;print&quot;&gt; //匹配了打印机 查询中还有很多属性可用，例如min-device-width、max-device-width，以及显示方向[orientation,这可以是横向（landscape）或纵向（portrait）]，此外还有许多其他属性，根据需要添加多个link，涵盖所要支持的全部设备 直接在CSS中增加媒体查询(IE8及以前版本不支持媒体查询)，例： 123456789101112131415161718@media screen and (min-device-width: 481px) &#123; #guarantee &#123; margin-right: 250px; &#125;&#125;@media screen and (max-device-width:480px) &#123; #guarantee &#123; margin-right: 30px; &#125;&#125;@media print &#123; body &#123; font-family: Times, &quot;Times New Roman&quot;, serif; &#125;&#125;p.special &#123; color: red;&#125; 选择器与类 只能为body添加样式 可以用于定义一类元素 首先，为HTML中的元素添加一个class属性，其次，在CSS中选择这个类 类选择器，先选择类中的元素，再用”.”指定一个类 1234567&lt;p class = &quot;greentea&quot;&gt;...&lt;/p&gt; //HTMLp.greentea&#123; color: green;&#125; //CSS id选择器，方法如类选择器，除了不用”.”改用用”#”指定id 子孙选择器，父元素和子孙元素名之间放一个空格，使用： 123#exlixirs h2 &#123; color: black;&#125; 属性选择器，可以根据属性值来选择元素，如： 123img[width] &#123; border: black thin solid; &#125;img[height = &quot;300&quot;] &#123; border: red thin solid; &#125;image[alt~=&quot;flowers&quot;] &#123; border: #ccc thin solid; &#125; 按兄弟选择，可以使用一个”+” 123h1+p &#123; font-style: italic;&#125; 结合选择器 首先定义上下文，代表id为greentea的div必须是blockquote的父元素 然后给出你想选择的元素 然后指定伪类或伪元素：1div#greentea &gt; blockquote 1div#greentea &gt; blockquote p 123div#greentea &gt; blockquote p:first-line &#123; font-style: italic;&#125; 直接孩子，使用#elixir&gt;h2 复杂选择，方式一样，例如#elixir blockquote h2 合并类规则 12345blockquote.greentea,p.greentea&#123; color: green;&#125; //CSS&lt;blockquote class = &quot;greentea&quot;&gt; //HTML 省略所有元素名，只有一个点，即可运用到全部成员 123.greentea&#123; color: green；&#125; 一个元素可以拥有多个类，&lt;p class = &quot;greentea raspberry blueberry&quot;&gt; id属性，与类类似，但是id具有唯一性，一个元素不能有多个id，另外页面上不允许多个元素都有相似的id 12345&lt;p id=&quot;footer&quot;&gt;...&lt;/p&gt;#footer &#123; ...&#125;//p#footer 类名要以一个字母开头，id可以以一个数字或者字母开头，它们都可以包含字母、数字以及_字符，但不能有空格 继承 元素能从他们的父元素继承一部分样式 例如，font-family 继承的样式可以被覆盖 如果样式会影响文本的外观，那么所有的这样子的样式都会被继承，比如：color、font-family、font-size、font-weight、font-style等等 其他的一般都不能被继承，如果不确定可以尝试一下 /* */注释 层叠 浏览器用多个样式表组织样式，最优点的是作者的样式，然后是读者的样式，最后才是浏览器的默认样式 读者如果在某个属性声明的最后加上”!important”，那么他就能覆盖作者的样式 浏览器想知道某个元素的属性，会通过5个步骤 收集所有样式表 找到所匹配的声明 现在对所有匹配的规则排序 现在按特性对所有声明排序 最后，对于冲突的规则，按照它们在各自的样式表中出现的顺序进行排序 求特定性，特定性由一组3个数开始，000 这个选择器包含id吗？每个id加1分 这个选择器包含类或伪类么？每个类或伪类加1分 这个选择器包含元素名吗？一个元素名加1分 然后将他们读作真正的数，其中100&gt;010&gt;001 注意，我们只在作者、读者和浏览器类别范围内排序，并不对整个列表重新排序 属性color 颜色 color 设置文本元素的前景色 background-color 控制元素的背景颜色 常用颜色Aqua Black Blue Fuchsia Gray Green Lime Maroon Navy Olive Purple Red Sliver Teal White YellowCSS只定义了16个基本颜色和大约150个颜色名 按红绿蓝指定颜色，例： 123456body&#123; background-color: rgb(80%, 40%, 0%);&#125;//数字也可以指定为0到255之间的一个数值body&#123; background-color: rgb(204, 102, 0);&#125; 十六进制码，前两位表示红色，中间两位表示绿色，最后两位表示蓝色,且如果每两位数字都相同，那可以缩写成类似#cb0的写法 可以利用诸如PS等应用找到Web颜色，或者使用在线颜色表 font 字体 font-family字体样式 5个字体系列：sans-serif、serif、monospace、cursive、fantasy Serif字体系列，Times、Times New Roman 、Georgia，具有衬线，常见到报纸上的排版 Sans-serif字体系列，Verdana、Arial Black、Trebuchet MS、Arial、Geneva，没有衬线，在计算机屏幕上更容易读 Monospace字体系列，Courier、Courier New、Andale Mono字体包含固定宽度的字符，主要用于软件代码显示 Cursive字体系列，Comic Sans、Apple Chancery，一些看似手写的字体，常在标题里看到 Fantasy字体系列，Last Ninja、Impact，某种风格的装饰性字体 使用CSS指定字体系列，123body&#123; font-family: Verdana, Geneva, Arial, sans-serif;&#125;//浏览器从第一个开始找，没有的话就往后，还没有就使用浏览器默认的sans-serif字体 font-style 用来设置斜体文本，italic oblique斜体和倾斜 font-weight 用来设置粗体，lighter normal bold bolder text-decoration用来增加装饰，none underline overline line-through @font-faceWeb字体 允许你定义一种字体的名字和位置，然后在页面中使用 常用字体格式：TrueType字体：.ttf,OpenType字体：.otf,Embedded Opentype字体：.eot,SVG字体：.svg,Web开放字体格式：.woff 现代浏览器上支持的最为广泛的格式是Web开放字体格式 将字体文件放到web上 使用：12345@font-face &#123; font-family: &quot;Emblema One&quot;; src: url(&quot;http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.woff&quot;), url(&quot;http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.ttf&quot;)&#125;//我这边浏览器没啥效果。。不知道是什么问题 字体大小 font-size: 14px;字的高度为14像素高 font-size: 150%;字相对于另一个字体的大小，若从父元素继承了，就是相对于父元素的大小 font-size: 1.2em; 比例系数 除此之外，还可以将文字大小指定为，xx-small, x-small, small, medium, large, x-large或xx-large，浏览器会将这些关键字转为像素值，其中small为12像素，然后每个大小大约比前一个大20% 通常，可以选一个关键字（推荐small或medium），然后利用em或者百分数相对body指定其他元素字体大小。 默认情况下，h1是200%，h2是150%，h3是120%，h4是100%，h5是90%，h6是60% 浏览器默认16像素 字体可以简写，所需的所有属性为font-family,font-style,font-weight,font-size,font-variant,line-height,按照这个顺序font-style font-variant font-weight font-size/line-height font-family，前三个顺序不重要，非必需，但一定要在font-size前，font-size必须指定 盒模型 CSS将每个元素视为盒模型（box model），每个盒模型由一个内容区以及可选的内边距，边框和外边框组成，其中，内容区（content area）包含内容（例如文本和图像），内容区被可选的透明内边距（padding）包围，内边距周围可能放置一个可选的边框（border），最后有一个可选的透明外边距（margin）包围所有部分 border-style可以控制边框的视觉样式，共8种（solid实线，double双线，groove槽线，outset外凸，dotted虚线，dashed破折线，inset内凹，ridge脊线） border-width控制边框宽度，可以采用关键字或者像素指定（thin medium thick） border-color控制边框颜色，与设置颜色类似 指定某一边的边框，可以使用这样的形式：border-top-color border-bottom：thin dotted #888888;灰色细虚线 border-radius： 15px创建圆角，可以利用px或者em指定半径大小 padding 内边距，可以采用缩写，按照top right bottom left的顺序，若四个值相同，那只需写一个就行了 line-height 行间距,比较特殊，可以直接用数字,代表自己字体大小的倍数 letter-spacing 字母之间间距 list-style 列表外观 text-align 内联元素对齐，可以设置ceter width 可以设置元素宽度，不设置默认auto background-image 元素后面放置一个图像，使用：background: url(images/background.gif); background-position,用于设置图像位置，可以按像素指定，也可以指定为一个百分数，或者采用关键字（top、left、right、bottom、center） background-repeat，用于控制平铺行为（no-repeat,repeat-x,repeat-y,inherit，repeat） border，background都可以简写 a元素和它的多重人格 页面上的链接可以有多种状态：可能未访问、已访问或者处于悬停状态（还有其他状态），可能会用到伪类 此外还有：focus和active状态，浏览器将焦点放在连接上就是焦点状态（用TAB键，键盘输入时），用户第一次单击一个链接时就处于活动状态 适当的顺序为，link，visited，hover，focus，然后是active 使用方式：123456789a:link &#123; color: green;&#125;//未访问a:visited &#123; color: red;&#125;//已访问a:hover &#123; color: yellow;&#125;//悬停 伪类（Pseudo-class） 表现的像个类，但并不是真正的类，例如之前的a:visited a:link a:hover还有first-child 伪类不知能处理链接，也能够对其他类型的元素提供处理 布局与定位流 流实际上就是浏览器在页面上摆放HTML元素所用的方法 浏览器从HTML文件最上面开始，从上到下沿着元素流逐个显示所遇到的各个元素 块元素自上而下流，每个块元素之间加一个换行 内联元素在水平上挨着，总体上从左上方流向右下方 外边距，并排放置，外边距叠加，上下放置，取决于最大外边距 float 首先它会尽可能远的向左或向右浮动一个元素，然后它下面的所有内容会绕流这个元素 对于所有的浮动元素都有一个要求：它必须有一个宽度 浮动元素外边距不会被折叠，注意这点可以避免一些错误 内联元素同样可以浮动，常见为浮动一个图像 float属性可以设置为left或者right 此时没浏览器会如下处理float 首先，浏览器正常将元素流入页面，从文件最上面开始，逐步移向末尾元素 浏览器遇到浮动元素，会将其尽可能放在最右边，然后从流中删除这个段落 然后其他块元素会填在这里，就像根本没这个段落 不过，在内联元素定位时，它们会考虑浮动元素的边界，所以会围绕着浮动元素 实现两栏效果 将sidebar放在页眉下面，然后用float将sidebar栏向右浮动，然后将主内容的右外边距至少设置得和sidebar的宽度相同，这样主内容区和边栏就会分开，但是宽度太宽时，页脚会上移造成重叠 可以利用clear属性解决这个问题，在footer中设置clear: right,代表这个元素右边不允许有浮动元素，此时还有另一个问题，在小的移动设备会看到边栏在最上面，因为我们把sidebar放在了主要内容前 可以采用右紧左松，也就是将主内容向左浮动，设置仿照如上，这样内容的顺序会是对的，但是边栏看起来非常松散 流体与冻结设计 流体布局（liquid layouts），不论浏览器调整到多大的宽度，布局都会扩展，填满整个浏览器，而有时候布局锁定更为重要，这样当用户调整屏幕大小时，你依然可以保持原样，这被称为冻结布局（frozen layouts） 首先，你需要将body内的所有内容放置于一个id为”allcontent”的&lt;div&gt;元素内123456#allcontent&#123; width: 800px; padding-top: 5px; padding-bottom: 5px; background-color: #675c47;&#125; 这样页面宽度将被限制为800px，在页面很宽时，右边很多空白空间 凝胶布局 这是Web上常见的一种设计，介于冻结与流体之间，称为凝胶（Jello），它会锁定页面中内容区的宽度，不过会将它在浏览器中居中12345678#allcontent&#123; width: 800px; padding-top: 5px; padding-bottom: 5px; background-color: #675c47; margin-left: auto; margin-right: auto;&#125; 绝对定位 可以在页面上精确的定位元素，同时采用绝对定位可以实现一些漂亮的效果 一个元素绝对定位时，浏览器首先将它从流中完全删除，然后浏览器将这个元素放置在位置属性所制定的位置上，绝对定位是相对于最近的已定位的祖先元素，例： 123456#sidebar &#123; positon: absolute; top: 100px; right: 200px; width: 280px;&#125; 同时，在绝对定位时，一个元素可有放在另一个绝对定位的元素之上，那么谁在上面？每个定位元素（绝对、相对、固定定位的元素）都有一个名为z-index的属性，将会指定它在一个虚拟z轴上的位置，越上面的，z-index越大，使用：z-index: 1;就可以确保在其他的元素上方，但是有多个需要定位的元素，那需要好好考虑下数值。 position拥有4个值：static， absolute， fixed 和 relative，其中固定（Fixed）定位是将元素放在相对于浏览器窗口的一个位置上（而不是相对与页面），所以固定元素永远不会移动，而相对（Relative）定位会让元素正常流入页面，不过在页面上显示“相对于”自己的起点要进行偏移，相对定位常用于更高级的定位和特殊效果 绝对定位元素不必须指定宽度，但是，会占据浏览器整个宽度，这可能并不是你想要的 指定位置还可以使用百分数，但是位置可能会改变，百分数还常用与制定宽度，可以使主内容区和边栏的大小更为灵活 CSS表格 类似电子表格只包含行和列 为整个表格创建一个块，然后为每行创建块，例： 12345678910&lt;div id = &quot;tableContainer&quot;&gt; &lt;div id = &quot;tableRow&quot;&gt; &lt;div id = &quot;main&quot;&gt; ... &lt;/div&gt; &lt;div id = &quot;siderbar&quot;&gt; ... &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS实现 12345678910111213141516171819202122 div#tableContainer &#123; display: table; border-spacing: 10px; //单元格间距 &#125; div#tableRow &#123; display: table-row; &#125; #main &#123; display: table-cell; background: #efe5d0 url(images/background.gif) top left; font-size: 105%; padding: 15px; vertical-align： top; //单元格上对齐&#125; #sidebar &#123; display: table-cell; background: #efe5d0 url(images/background.gif) bottom right; font-size: 105%; padding: 15px; vertical-align： top;&#125; 开发商特定的CSS属性 首先一个短横线一个开发商标识符在加另一个短横线在加属性，如 1-moz-transform 建立变换与过渡 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 &lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;CSS Transforms and Transitions&lt;/title&gt; &lt;style&gt; #box &#123; position: absolute; top: 100px; left: 100px; width: 200px; height: 200px; background-color: red; transition: transform 2s; -webkit-transition: -webkit-transform 2s; -moz-transition: -moz-transform 2s; -o-transition: -o-transform 2s; /* no IE support for transition until possibly IE 10 */ &#125; #box:hover &#123; transform: rotate(45deg); -webkit-transform: rotate(45deg); /* Safari, Chrome, mobile Safari, and Android */ -moz-transform: rotate(45deg); /* Firefox */ -o-transform: rotate(45deg); /* Opera */ -ms-transform: rotate(45deg); /* IE 9 */ &#125; &lt;/style&gt; &lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://chinti.xyz/categories/读书笔记/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://chinti.xyz/tags/CSS/"}]},{"title":"Head First HTML与CSS 阅读笔记（HTML部分）","slug":"Head-First-HTML与CSS-阅读笔记（HTML部分）","date":"2017-12-26T04:56:11.000Z","updated":"2018-01-07T07:18:17.448Z","comments":true,"path":"2017/12/26/Head-First-HTML与CSS-阅读笔记（HTML部分）/","link":"","permalink":"http://chinti.xyz/2017/12/26/Head-First-HTML与CSS-阅读笔记（HTML部分）/","excerpt":"前言&#160; &#160; &#160;&#160;在之前17年6月实习时，负责了管理公司论坛的任务，在此之中初步接触到了HTML和CSS方面的知识，但是学习的不够深入，现在是17年年底，打算重新开始学习这方面的知识，做一些巩固，为之后学习JavaScript与Jquery等打下基础。&#160; &#160; &#160;&#160;《Head First HTML与CSS》是一本对新手友好的前端入门书，虽然废话很多，插画也多的像连环画，但是作为第一本前端书籍是十分合适的，毕竟我认为保持高涨的兴趣才是进步的动力。&#160; &#160; &#160;&#160;本书第一章到第六章介绍了HTML部分（第五章有部分发布的知识，暂且略过），第十二章讲述了HTML5的新特性，而十三到十五章则将HTML与CSS同时进行介绍。本篇博客主要整理HTML部分的知识点。另一篇部分为Head First HTML与CSS阅读笔记（CSS部分）","text":"前言&#160; &#160; &#160;&#160;在之前17年6月实习时，负责了管理公司论坛的任务，在此之中初步接触到了HTML和CSS方面的知识，但是学习的不够深入，现在是17年年底，打算重新开始学习这方面的知识，做一些巩固，为之后学习JavaScript与Jquery等打下基础。&#160; &#160; &#160;&#160;《Head First HTML与CSS》是一本对新手友好的前端入门书，虽然废话很多，插画也多的像连环画，但是作为第一本前端书籍是十分合适的，毕竟我认为保持高涨的兴趣才是进步的动力。&#160; &#160; &#160;&#160;本书第一章到第六章介绍了HTML部分（第五章有部分发布的知识，暂且略过），第十二章讲述了HTML5的新特性，而十三到十五章则将HTML与CSS同时进行介绍。本篇博客主要整理HTML部分的知识点。另一篇部分为Head First HTML与CSS阅读笔记（CSS部分） [注]书中所有代码可在代码地址找到。 概念简称 HTML是HyperText Markup Language的缩写，译为超文本标记语言，用来建立网页的结构。 CSS是Cascading Style Sheets的缩写，译为层叠样式表，用来控制HTML的表现。 常识 由于浏览器会忽略制表符、回车和大部分空格，但是为了提高HTML文档的可读性，利用这些会很有帮助。 按照一定标准编写html，可以减少不同浏览器之间的差异度甚至不兼容。 属性的写法都是一样的：首先是属性名，后面一个等号，然后是双引号括起来的属性值，不严谨的写法可能会出现问题。 文件夹层数没有限制，但是过多的情况下，可能说明网站组织太复杂。 尽可能使用元素告诉浏览器你的内容的含义 web服务器默认文件名为”index.html”或”default.htm”，根据不同服务器。没有斜线的情况下，如果该目录存在，浏览器会自动添加末尾的斜线 端口默认为80 嵌套 根元素，子元素 了解如何嵌套，可以避免标记不匹配，不要越界 元素 块（block）元素：特立独行,&lt;h1&gt;、&lt;h2&gt;、...、&lt;h6&gt;、&lt;p&gt;和&lt;blockquote&gt; 内联（inline）元素：随波逐流,&lt;q&gt;、&lt;a&gt;和&lt;em&gt; void元素：没有实际内容，可以使用简写，提高效率 交互性 html不只是一个被动的文档，它可以拥有可执行的内容，可以使用JavaScript脚本语言来编写程序或脚本 通过JavaScript调用HTML5提供的一些API可以创建许多Web应用 特殊字符 &lt; 可以使用&amp;lt代替 &gt; 可以使用&amp;gt代替 &amp; 可以使用&amp;amp代替 更多常见特殊字符可以在常见字符地址（书上的404了）找到，如果需要更为详尽的字符实体清单可以在详尽字符地址找到。 工具[注]学习环境是Windows10 Notepad（记事本） 主要工具 WebStorm Dreamweaveretc. 浏览器[注]为了在多个浏览器测试效果的细微差别，所以至少要下载并了解两个不同的浏览器。 Chrome Internet Explorer Firefox Opera Safarietc. HTML首部[注]元素=开始标记+内容+结束标记 &lt;html&gt;标签，它总会是一个根元素html 告诉浏览器文件内容是HTML，使用：&lt;html&gt;...&lt;/html&gt;包围你的的HTML 头部head 包含Web页面的有关信息，只能放置&lt;title&gt;&lt;meta&gt;&lt;style&gt;元素。 title 页面标题 meta 关于页面的信息 style 页面样式，例&lt;style type=&quot;text/css&quot;&gt;...&lt;/style&gt;然后在里面可以写body{...}等CSS语法（CSS部分将会整理在另一篇博客）。 [注]编写HTML时要把首部和页面主体分开。 HTML页面主体 主体body web页面的主体元素 标题h1 h2 h3 h4 h5 h6 共六级标题，使用：&lt;h1&gt;标题&lt;/h1&gt; 段落p 块元素，使用：&lt;p&gt;...&lt;/p&gt;small专为极小字体设计，可用于版权信息 超链接 &lt;a href=&quot;链接地址&quot;&gt;链接文本&lt;/a&gt; href是hypertextreference的缩写，意思为超文本引用。 &lt;img&gt;元素也可以放在&lt;a&gt;标记之间 ../dotdot代表向上到父级文件夹 title 提供链接信息 id 用来为目标创建标识符，必须是唯一的，例：&lt;h2 id=&quot;chai&quot;&gt;Chai Tea&lt;/h2&gt;,然后使用方法如下：&lt;a href=&quot;index.html&quot;#chai&gt;See Chai Tea&lt;/a&gt; target属性，使用：target=&quot;_blank&quot;代表在新窗口打开 内部网页采用相对路径，外部网页采用绝对路径 默认的，这个标签具有下划线且可以点击 保证链接标签简洁且有意义（不要使用这里或者这一页的标签），在title属性中提供额外信息，且不要将链接放在一起 强调em内联元素，使用：&lt;em&gt;...&lt;/em&gt; 删除del将某些内容标记为要删除内容（删除线） 插入ins标记要插入的内容（下划线） 换行br用于换行，使用&lt;br&gt;，它是一个void元素，处理XHTML时可以用&lt;/br&gt; 代码code，块元素，用来显示计算机程序代码 加粗strong，内联，用来标记特别强调的文本 原样显示pre，希望浏览器按你输入的方式原样显示文本，使用这个元素指定文本格式 时间time，这个元素告诉浏览器这个内容是个日期或时间 图像img图片 src属性，指定img的源文件地址。可以指定相对地址，该属性必须填写，与href属性类似。 alt属性，指定描述这个图像的一些文字，在图像无法显示时替代显示文本，可用于帮助视力障碍的用户 width属性，指定宽度 height属性，指定高度，高度与宽度都是由像素数指定 图片格式 常见格式为：JPEG、PNG和GIF 照片和复杂图像使用JPEG，单色图像、logo和几何图形使用PNG或GIF 规范 指定长宽，可以使页面在显示图像之前就建立布局 指定长宽可以用于缩放图像，但它会先获取完整图像 浏览器宽度通常被设为800到1280像素之间，所以图像宽度要小于800 可以用photoshop等图像编辑软件调整图片大小 引用 &lt;q&gt; 短引用，不是所有浏览器都会在&lt;q&gt;的内容两边加上引号。去掉双引号用&lt;q&gt;可以让页面更加结构化，更有意义。是一个内联元素。 &lt;blockquote&gt;长引用，需要被单独显示。是一个块元素。 列表 li列表项 ol有序列表，ordered list的简写，由浏览器编号 ul无序列表，unordered list的简写 第一步，每个列表项都要放在单独的&lt;li&gt;元素中，第二步，用&lt;ol&gt;或&lt;ul&gt;包围所有列表项 可以为列表添加一些样式，列表的主要属性是lis-style-type,disc是默认的列表标记类型，circle，提供一个简单的圆形标记，square方块标记，none删除标记 定制标记，list-style-image: url(images/backpack.gif); 文本回绕，list-style-position,inside标记下回绕，outside文本下回绕 容器逻辑区就是页面上一组彼此相关的元素，通过div或者span容器来标记一组元素div块元素容器 在属于一个逻辑区的元素周围放置&lt;div&gt;开始和结束标记 利用&lt;div&gt;为页面增加更多的结构，可以进一步展现页面的底层逻辑结构，帮助别人理解你的页面 有需要的话，可以在结构上增加结构 很多情况下，会创建&lt;div&gt;并把他们放在类中 span内联元素容器 类似div，只是创建的是内联元素 表格 用table标记一个表格的开始，每行tr开始，th代表每列的表头，其余由td标记 1234567891011121314151617181920212223242526&lt;table&gt; &lt;tr&gt; &lt;th&gt;City&lt;/th&gt; &lt;th&gt;Date&lt;/th&gt; &lt;th&gt;Temperature&lt;/th&gt; &lt;th&gt;Altitude&lt;/th&gt; &lt;th&gt;Population&lt;/th&gt; &lt;th&gt;Diner Rating&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Walla Walla, WA&lt;/td&gt; &lt;td&gt;June 15th&lt;/td&gt; &lt;td&gt;75&lt;/td&gt; &lt;td&gt;1,204 ft&lt;/td&gt; &lt;td&gt;29,686&lt;/td&gt; &lt;td&gt;4/5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Magic City, ID&lt;/td&gt; &lt;td&gt;June 25th&lt;/td&gt; &lt;td&gt;74&lt;/td&gt; &lt;td&gt;5,312 ft&lt;/td&gt; &lt;td&gt;50&lt;/td&gt; &lt;td&gt;3/5&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; caption 标题,放在table下，tr上,可以在CSS指定它的位置，大多数浏览器默认显示在表格上方 12345678910111213141516171819202122&lt;caption&gt; The cities I visited on my Segway&apos;n USA travels&lt;caption&gt;//CSS部分table &#123; margin-left: 20px; margin-right: 20px; border: thin dotted gray; caption-side: bottom; //指定位置&#125;td, th &#123; border: thin dotted gray; padding: 5px;&#125;caption &#123; font-style: italic; padding-top: 8px;&#125; border-spacing 边框间距，每个表格单元的外边距不能被设置，只能设置共同间距，而且可以在垂直方向和水平方向设置不同间距，例如border-spacing: 10px 30px;代表设置了10像素水平边框间距，30像素的垂直边框间距 border-collapse 边框折叠，使用：border-collapse: collapse; 颜色交替，一种通过定义类还有一种通过伪类nth-child这是一种更高级的指定方法 12345678910111213p:nth-child(even) &#123; background-color: red;&#125;p:nth-child(odd) &#123; background-color: green;&#125;//或者可以用表达式 p:nth-child(2n) &#123; background-color: red;&#125;p:nth-child(2n+1) &#123; background-color: green;&#125; 合并单元格，当存在一个单元格跨多行时，可以使用rowspan属性，指定一个表格数据单元格占的行数，然后将这个单元格所跨越的其他行删除相应的表格数据元素,同理，colspan属性可以用来跨多列 12345678910111213141516&lt;tr&gt; &lt;td rowspan = &quot;2&quot;&gt;Truth or Consequences, NM&lt;/td&gt; &lt;td class = &quot;center&quot;&gt;August 9th&lt;/td&gt; &lt;td class = &quot;center&quot;&gt;93&lt;/td&gt; &lt;td rowspan = &quot;2&quot; class = &quot;right&quot;&gt;4,242 ft&lt;/td&gt; &lt;td rowspan = &quot;2&quot; class = &quot;right&quot;&gt;7,289&lt;/td&gt; &lt;td class = &quot;center&quot;&gt;5/5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td class = &quot;center&quot;&gt;August 27th&lt;/td&gt; &lt;td class = &quot;center&quot;&gt;98&lt;/td&gt; &lt;td class = &quot;center&quot;&gt;4/5&lt;/td&gt;&lt;/tr&gt; 表格嵌套，在表格里再放个table 表单 form表单元素，几乎所有块级元素都可以放在里面,action属性包含Web服务器脚本的URL，method属性确定表单数据如何发送到服务器，常用方法POST 1234567&lt;form action=&quot;http://wickedlysmart.com/hfhtmlcss/contest.php&quot; method=&quot;POST&quot;&gt; &lt;p&gt;Just type in your name (and click Submit) to enter the contest:&lt;br&gt; First name: &lt;input type=&quot;text&quot; name=&quot;firstname&quot; value=&quot;&quot;&gt;&lt;br&gt; Last name: &lt;input type=&quot;text&quot; name=&quot;lastname&quot; value=&quot;&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/p&gt;&lt;/form&gt; input元素用于输入一行文本，它还有一些可选的属性，允许你为这个控件设置最大字符个数和宽度，void内联元素，其中提交按钮需要指定”submit”作为input元素的type属性值，”radio”可以单选按钮，若有checked布尔属性则默认选中，”checkbox”复选框，相关选框必须共有一个名字，每个框有一个不同的值，可以用maxlength = &quot;100&quot;设置最多输入100字符 textarea元素可以创建一个多行的文本区，输入的文本在文本区中放不下，右边会出现滚动条,row行，cols列 1&lt;textarea name = &quot;comments&quot; rows = &quot;10&quot; cols = &quot;48&quot;&gt;&lt;/textarea&gt; select元素可以创建一个下拉选择的菜单，option元素创建菜单项 123&lt;select name = &quot;characters&quot;&gt; &lt;option value = &quot;Buckaroo&quot;&gt;Buckaroo Banzai&lt;/option&gt;&lt;/select&gt; 以下是HTML5新增的表单元素 数字输入，number用于限制只输入数字，有些浏览器会在右边给一个显示箭头，用于增减 1&lt;input type = &quot;number&quot; min = &quot;0&quot; max = &quot;20&quot;&gt; 范围输入，range，显示一个滑动条而非输入框 1&lt;input type = &quot;range&quot; min = &quot;0&quot; max = &quot;20&quot; step = &quot;5&quot;&gt; 颜色输入，color，用于指定元素 1&lt;input type = &quot;color&quot;&gt; 日期输入，date，用于选择时间，方法同上 email输入，email，同上 tel输入，tel，同上 url输入，url，同上 POST与GET 都是将表单数据发送到服务器，POST会打包表单变量，然后后台发送，GET也会打包，但会把这些数据追加到URL最后，向服务器发送一个请求，用户会可见 关于可访问性 实际上应该用label元素标记那些标签，可以提供页面结构更多的信息，这样可以更容易用css添加样式，另外对于有视力障碍的人也有助于他们使用的屏幕阅读器更准确的标识表单元元素，id可以与name相同，每个id必须唯一，使用：1234&lt;input type = &quot;radio&quot; name = &quot;hotornot&quot; value = &quot;hot&quot; id = &quot;hot&quot;&gt;&lt;label for = &quot;hot&quot;&gt;hot&lt;/label&gt;&lt;input type = &quot;radio&quot; name = &quot;hotornot&quot; value = &quot;not&quot; id = &quot;not&quot;&gt;&lt;label for = &quot;not&quot;&gt;not&lt;/label&gt; fieldset和legend 表单分组，用fieldset将公共元素组织在一起，用legend为这个分组提供一个标签123456&lt;fieldset&gt; &lt;legend&gt;Condiments&lt;/legend&gt; &lt;input ...&gt;...&lt;br&gt; &lt;input ...&gt;...&lt;br&gt; ...&lt;/fieldset&gt; passwords 会为你输入的文本增加掩码，工作与text类似，不过并不会采用一种安全的方式从浏览器到服务器脚本，想要提高安全性，清联系托管公司 file 创建一个文件输入元素，只需将input元素的type属性设置为file，此外运用这个元素必须使用POST方式 多选菜单 为select元素增加布尔属性multiple即可，这样菜单就不再显示下拉，而是得到一个多选菜单 Placeholder 在input元素中增加placeholder属性，可以设置一个提示，告诉别人你希望他填写什么 Required 可用与任何表单元素，是一个布尔属性，加入它，说明这是一个必须填写的表单，必须输入才能提交 HTML5及工业标准HTML5 doctype 文档类型定义 &lt;!doctype html&gt; 从html5开始不再有版本号，是一个动态的标准，且具有向后兼容性。HTML5主要是添加了些新东西，不要为了使用新特性而使用新特性，应当物尽其用，最合适的东西干最适合的活。 字符编码 meta，使用:&lt;meta charset=&quot;utf-8&quot;&gt; 指定doctype以及使用&lt;meta&gt;指定字符编码是义务必须履行 meta放在head中 W3C验证工具 W3C验证工具 重新考虑HTML结构&#160; &#160; &#160;&#160;将div元素替换成一些更加特定的元素，能够更明确地指示其中包含什么类型的内容 新增元素 可以查看http://caniuse.com/#search=new%20elements,了解浏览器是否支持新元素 article 表示页面中一个独立的组成部分，如一个博客帖子、用户论坛帖子或者新闻报道 nav 所包含的内容将作为页面的导航链接 header 放在页面顶部的内容，或者放在页面某个区块的顶部 footer 放在页面底部的内容，或者放在页面某个区块的底部 time 可能包含一个日期或时间，也可能同时包含日期和时间，简要指南如下 1234&lt;time datetime=&quot;2012-02-18&quot;&gt;2/18/2012&lt;/time&gt;//内容中，可以写任何内容，如&quot;February 18,2012&quot;甚至可以是&quot;yesterday&quot;或&quot;now&quot;//若元素内容没有采用日期/时间的格式来写，就必须要datetime属性//（2012-02 2012 2012-02-18 9：00 05：00 2012-02-18 05：00z（utc时间）） aside 包含的内容是对页面内容的补充，如插图或边栏 section 一个主题内容分组，通常包含一个首部（header），可能还有一个底部（footer） video 用来为页面增加视频媒体 mark 用于突出显示某些文本 meter 显示某个范围的度量 progress 显示任务的完成进度 canvas 显示用javaScript绘制的图像和动画 figure 定义类似照片、图标甚至代码清单等独立的内容 视频video 可以将视频看作img元素，可以提供一个src属性引用视频 12&lt;video controls autoplay width = &quot;512&quot; height = &quot;288&quot; src = &quot;video/tweetsip.mp4&quot;&gt; &lt;/video&gt; autoplay 自动播放 control 提供一组控件来控制播放、暂停、调节音量等 视频格式问题，Safari更接受H.264，Chorme更接受WebM autoplay与controls没有值，是一个bool属性，通常用户希望觉得加载页面时是否播放视频，所以是否加这个属性请三思 src 与img的src很相似 preload 用于细粒度（没懂，是指精细么）地控制视频如何加载，来实现优化，可以preload: none代表用户播放前不加载，metadata代表下载元数据，不下载内容，也可以是设置为auto，交给浏览器决定 poster 在视频未播放时，将视频的某一帧显示为“海报”图像，浏览器通常会指定第一帧,这往往是个黑屏 loop 自动循环，bool属性 width height设置视频显示区，有多余就显示黑边 视频格式 &#160; &#160; &#160;&#160;现在主流格式有3种，MP4容器，包含H.264视频和AAC音频，WebM容器，包含VP8视频和Vorbis音频，Ogg容器，包含Theora视频和Vorbis音频，在使用多个格式时可采用source元素，方式如下：12345678 &lt;video controls autoplay width = &quot;512&quot; height = &quot;288&quot;&gt; &lt;source src = &quot;video/tweetsip.mp4&quot;&gt; &lt;source src = &quot;video/tweetsip.webm&quot;&gt; &lt;source src = &quot;video/tweetsip.ogv&quot;&gt; &lt;p&gt;Sorry, your browser doesn&apos;t support the video element.&lt;/p&gt; &lt;/video&gt;``` - 如何更加具体的指定格式 &lt;source src = &quot;video/tweetsip.ogv&quot; type = &apos;video/ogg; codecs = &quot;theora, vorbis&quot;&apos;&gt; //type可选帮助浏览器确定能否播放文件，单引号 &lt;source src = &quot;video/tweetsip.mp4&quot; type = &apos;video/mp4; codecs = &quot;avc1.42E01E, mp4a.40.2&quot;&apos;&gt; &lt;source src = &quot;video/tweetsip.webm&quot; type = &apos;video/webm; codecs = &quot;vp8, vorbis&quot;&apos;&gt; ``` 参考http://wiki.whatwg.org/wiki/Video_type_parameters得到有关type参数的更多信息 在video元素中插入object元素，放在source下面，如果浏览器不认识video那么就会用object，最终看到一个flash视频 音频 audio使用方法与video类似","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://chinti.xyz/categories/读书笔记/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://chinti.xyz/tags/HTML/"}]},{"title":"Hexo+GithubPage博客搭建","slug":"Hexo-GithubPage博客搭建","date":"2017-12-24T13:19:26.000Z","updated":"2018-01-04T05:20:53.410Z","comments":true,"path":"2017/12/24/Hexo-GithubPage博客搭建/","link":"","permalink":"http://chinti.xyz/2017/12/24/Hexo-GithubPage博客搭建/","excerpt":"前言&#160; &#160; &#160;&#160;在了解到博客后一直想用它进行一些学习上的记录，但是由于各种各样的原因计划一直搁浅了。不过在接下来的时间，继大半年前接触到一些浅显的前端技术后将进行比较系统的学习，所以借着机会将博客搭建完成。其实网上关于搭建个人博客的教程很多，但是呢作为Markdown程序员的开篇之作还是很适宜的。","text":"前言&#160; &#160; &#160;&#160;在了解到博客后一直想用它进行一些学习上的记录，但是由于各种各样的原因计划一直搁浅了。不过在接下来的时间，继大半年前接触到一些浅显的前端技术后将进行比较系统的学习，所以借着机会将博客搭建完成。其实网上关于搭建个人博客的教程很多，但是呢作为Markdown程序员的开篇之作还是很适宜的。 什么是Hexo，什么是Next&#160; &#160; &#160;&#160;Hexo是一个基于Node.js的快速、简洁且高效的博客框架。Hexo使用Markdown解析文章。Next是一款极简主义的主题，内容强大，使用简便。献上一张Next的图片。 什么是Markdown&#160; &#160; &#160;&#160;Markdown是一种可以使用普通文本编辑器编写的标记语言吗，通过这些简单的标记，实现易读易写，专注于文字本身。 什么是Github，什么是GithubPage&#160; &#160; &#160;&#160;GitHub是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名GitHub。GithubPage是一个用于展示你和你的项目的网页，可用于搭建个人博客。 基础配置部分[注]本文中所使用的Hexo版本为3.4.3，node.js版本为8.9.3，PC环境为Windows101.安装&amp;搭建 安装Git：Git下载地址戳这 安装Node.js：Node下载地址戳这 安装Hexo：Hexo官网&#160; &#160; &#160;&#160;首先打开GitBash（你可以通过右键Git Bash Here方便的打开），接下来的一系列操作都将会在GitBash中实现。附一张GitBash截图。Hexo本体安装： npm install hexo-cli -g新建一个博客文件夹，执行：cd &lt;folder&gt;再执行：hexo init 依赖包安装：npm install指定文件夹内容如下，说明新建完成。 注册Github账号，并新建Github仓库：仓库名字必须为 username.github.io，username就是你的Github用户名。 关联到Github账号：进入博客根目录，执行vim _config.yml翻到最下面，修改为：deploy：type: gitrepo:https://github.com/username/username.github.io.gitbranch: master然后执行： npm install hexo-deployer-git --save 2. 配置SSH&#160; &#160; &#160;&#160;SSH是一种安全协议，我们需要通过SSH将Git与Github进行绑定，才能通过Git向Github提交代码。 生成公钥私钥ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;，然后敲三下回车不用输入密码，之后会生成两个文件，分别为 id_rsa和id_rsa.pub，Windows10环境下，你可以在C:\\Users\\username\\.ssh中找到。 添加公钥到Github用记事本打开id_rsa.pub，将内容复制，然后打开你的Github主页。在右上角头像处——&gt;Setting，进入个人设置界面。进入Setting页面后，点击SSH and GPG keys进入子页面，然后点击New SSH key按钮。最后，将公钥id_rsa.pub的内容粘贴到Key处，点击Add SSH key。 验证在git bash中输入：ssh -T git@github.com，等待提示。 3. NexT主题下载在GitBash下输入：cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/nextyour-hexo-site 就是你的博客文件夹。然后修改，Hexo配置文件启用主题。进入博客根目录，执行：vim _config.yml,找到theme：，将它改为theme: next即可。 使用Hexo部分1. 常用命令 清除生成的文件和缓存：hexo clean 生成静态页面：hexo generate //或 hexo g 本地预览：hexo server //或 hexo s 然后在浏览器中输入localhost：4000即可预览效果，Ctrl+C结束 新建文章：hexo new post &quot;title&quot; 新建页面：hexo new page &quot;title&quot; 部署： hexo d 等待片刻你可以在浏览器输入：username.github.io看看效果。 2. 常用Markdown语法&#160; &#160; &#160;&#160;在新建文章后可以发现在_post文件夹下出现了一个md文件，你可以对它进行编辑。可以采用vim直接编写，也可以通过一些实时观看效果的编辑器进行编写，可以自己百度。本人使用的是Cmd Markdown。这里仅介绍一些常用的Markdown语法。 标题：# 一级标题 ## 二级标题类推可得最多六级标题 列表：无序列表- 文字 有序列表1. 文字 图片与链接：图片为![][] 链接为[][] 前一个方括号是文字内容，后一个方括号是序号，在文章尾部可以[序号]：链接地址的方式。插入外链图片需要一个图床，这里我采用的是一款chrome插件，叫做新浪微博图床，也可以试试其他正规的图床服务。 粗体与斜体：粗体**文字** 斜体*文字* 分割内容：-- == 阅读更多：&lt;!--more--&gt;在这行代码前的可以显示，后面的被隐藏，需要点击阅读更多才能看全文。 空行：&lt;br /&gt; 空格：&amp;#160; &amp;#160; &amp;#160;&amp;#160; &#160; &#160; &#160;&#160;了解以上这些，写出一篇文章应该可以了，更加完全的Markdown语法自行百度。 域名绑定1. 购买域名&#160; &#160; &#160;&#160;既然已经初步搭建好了自己的博客，但是是通过username.github.io进行访问的。我们需要有一个自己独立的域名它看起来逼格高一些（并不会）。域名服务商有很多，国内国外的，我选择了腾讯云。[注]接下来以在腾讯云购买域名为例，其他服务商应该也是大同小异。 2. 绑定域名 登陆腾讯云后台，进入我的域名——&gt;域名解析 添加DNS记录 在博客根目录里的public目录中新建CNAME文本，没有后缀名，可以新建一个txt把后缀删掉，编辑他，输入你的域名，保存并退出。将CNAME文本复制到source目录中一份。 执行代码hexo clean hexo d -g 由于DNS记录需要一定时间生效，稍等片刻，用你的域名访问看看。","categories":[{"name":"博客相关","slug":"博客相关","permalink":"http://chinti.xyz/categories/博客相关/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://chinti.xyz/tags/Hexo/"}]}]}